// swap
void swapMinHeapNode(struct MinHeapNode** a,
    struct MinHeapNode** b)
{
    struct MinHeapNode* t = *a;
    *a = *b;
    *b = t;
}

// funkcja potrzebna do prawidlowego ustalenia struktury kopca, sortuje elementy
void minHeapify(struct MinHeap* minHeap,
    int idx)
{
    int smallest, left, right;
    smallest = idx;
    left = 2 * idx + 1;
    right = 2 * idx + 2;

    if (left < minHeap->size &&
        minHeap->array[left]->dist <
        minHeap->array[smallest]->dist)
        smallest = left;

    if (right < minHeap->size &&
        minHeap->array[right]->dist <
        minHeap->array[smallest]->dist)
        smallest = right;

    if (smallest != idx)
    {
        
        MinHeapNode* smallestNode =
            minHeap->array[smallest];
        MinHeapNode* idxNode =
            minHeap->array[idx];

        
        minHeap->pos[smallestNode->v] = idx;
        minHeap->pos[idxNode->v] = smallest;

        
        swapMinHeapNode(&minHeap->array[smallest],
            &minHeap->array[idx]);

        minHeapify(minHeap, smallest);
    }
}

// czy min heap jest pusty
int isEmpty(struct MinHeap* minHeap)
{
    return minHeap->size == 0;
}

// najmniejszy element z kopca
struct MinHeapNode* extractMin(struct MinHeap* minHeap)
{
    if (isEmpty(minHeap))
        return NULL;

    
    struct MinHeapNode* root =
        minHeap->array[0];

    
    struct MinHeapNode* lastNode =
        minHeap->array[minHeap->size - 1];
    minHeap->array[0] = lastNode;

    
    minHeap->pos[root->v] = minHeap->size - 1;
    minHeap->pos[lastNode->v] = 0;

    
    --minHeap->size;
    minHeapify(minHeap, 0);

    return root;
}

// funkcja ktora updatuje dystans miedzy wierzcholkami
void decreaseKey(struct MinHeap* minHeap,
    int v, int dist)
{
    // Get the index of v in  heap array
    int i = minHeap->pos[v];

    // Get the node and update its dist value
    minHeap->array[i]->dist = dist;

    // Travel up while the complete
    // tree is not hepified.
    // This is a O(Logn) loop
    while (i && minHeap->array[i]->dist <
        minHeap->array[(i - 1) / 2]->dist)
    {
        // Swap this node with its parent
        minHeap->pos[minHeap->array[i]->v] =
            (i - 1) / 2;
        minHeap->pos[minHeap->array[
            (i - 1) / 2]->v] = i;
        swapMinHeapNode(&minHeap->array[i],
            &minHeap->array[(i - 1) / 2]);

        // move to parent index
        i = (i - 1) / 2;
    }
}

// funkcja sprawdzajaca czy wierzcholek jest w kopcu
bool isInMinHeap(struct MinHeap* minHeap, int v)
{
    if (minHeap->pos[v] < minHeap->size)
        return true;
    return false;
}

// wynik
void printArr(int dist[], int n)
{
    printf("Wierzcho≈Çek   Dystans\n");
    for (int i = 0; i < n; ++i)
        printf("%d \t\t %d\n", i, dist[i]);
}

// .
void dijkstra(struct Graph* graph, int src)
{

    // pobranie liczby wierzcholkow
    int N = graph->V;

    // tabela przechowujaca dystans
    int* dist = new int[N];

    // kopiec
    struct MinHeap* minHeap = createMinHeap(N);

    // zainicjalizowanie kopca maksymalnymi wartosciami inta(nieskonczonoscia w teorii)
    for (int v = 0; v < N; ++v)
    {
        dist[v] = INT_MAX;
        minHeap->array[v] = newMinHeapNode(v,
            dist[v]);
        minHeap->pos[v] = v;
    }

    // inicjalizacja wartosci pierwszego wierzcholka na 0
    minHeap->array[src] =
        newMinHeapNode(src, dist[src]);
    minHeap->pos[src] = src;
    dist[src] = 0;
    decreaseKey(minHeap, src, dist[src]);

    minHeap->size = N;

    // petla liczaca najkrotszy dystans
    while (!isEmpty(minHeap))
    {
        // wierzcholek z najmniejszym dystansem
        struct MinHeapNode* minHeapNode =
            extractMin(minHeap);

        // przechowanie jego indeksu
        int u = minHeapNode->v;

        // przejscie przez wszystkie sasiednie wierzcholki i policzenie dystansu
        struct AdjListNode* pCrawl =
            graph->array[u].head;
        while (pCrawl != NULL)
        {
            int v = pCrawl->dest;

            // jesli wyliczony dystans jest mniejszy
            if (isInMinHeap(minHeap, v) &&
                dist[u] != INT_MAX &&
                pCrawl->weight + dist[u] < dist[v])
            {
                dist[v] = dist[u] + pCrawl->weight;

                // aktualizacja wartosci i dystansu
                decreaseKey(minHeap, v, dist[v]);
            }
            pCrawl = pCrawl->next;
        }
    }

    
    printArr(dist, N);
}